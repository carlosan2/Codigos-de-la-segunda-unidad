/* 
	Fundación Kinal
    Centro educativo Técncico Laboral Kinal
    Quinto Perito
    Quinto Electrónica 
    Codigo Técnico: EB5AM
    Curso: Taller de Electrónica Digital y reparación de computadoras
    Proyecto: FINAL
    NOMBRE: Carlos Mayorga 2020404
    Fecha: 26 de MAYO de 2024
    */

#include <Keypad.h>
#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
const byte FILAS = 4; 
const byte COLUMNAS = 4; 
char keys[FILAS][COLUMNAS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte pinesFilas[FILAS] = {2, 3, 4, 5}; 
byte pinesColumnas[COLUMNAS] = {6, 7, 8, 9}; 
Keypad teclado = Keypad(makeKeymap(keys), pinesFilas, pinesColumnas, FILAS, COLUMNAS);

const int ledPins[] = {10, 11, 12, 13}; 
int numLeds = sizeof(ledPins) / sizeof(ledPins[0]);
int ledIndex = 0;
bool animacionLeds = false;

Servo servo;
bool moverServo = false;

bool animacionDisplay = false;

const int bcdValues[] = {
  0b0000, // 0
  0b0001, // 1
  0b0010, // 2
  0b0011, // 3
  0b0100, // 4
  0b0101, // 5
  0b0110, // 6
  0b0111, // 7
  0b1000, // 8
  0b1001, // 9
  0b1010, // H
  0b1011, // O
  0b1100, // L
  0b1101  // A
};
LiquidCrystal_I2C lcd(0x27, 16, 2); 

int contador = 0;
bool contandoAscendente = false;
bool contandoDescendente = false;

void setup() {
  Serial.begin(9600);

  for (int i = 0; i < numLeds; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], LOW);
  }
  servo.attach(9);
  lcd.begin();
  lcd.setCursor(0, 0);
  lcd.print("Tu Nombre");
  lcd.setCursor(0, 1);
  lcd.print("Proyecto Final");
  
  for (int i = 0; i < 4; i++) {
    pinMode(bcdPins[i], OUTPUT);
    digitalWrite(bcdPins[i], LOW);
  }
}

void loop() {
  char tecla = teclado.getKey();

  if (tecla == '1') {
    contandoAscendente = !contandoAscendente;
    contandoDescendente = false;
    animacionLeds = false;
    animacionDisplay = false;
    moverServo = false;
  }
  if (tecla == '2') {
    contandoDescendente = !contandoDescendente;
    contandoAscendente = false;
    animacionLeds = false;
    animacionDisplay = false;
    moverServo = false;
  }
  if (tecla == '3') {
    animacionLeds = !animacionLeds;
    contandoAscendente = false;
    contandoDescendente = false;
    animacionDisplay = false;
    moverServo = false;
  }
  if (tecla == '4') {
    animacionDisplay = !animacionDisplay;
    contandoAscendente = false;
    contandoDescendente = false;
    animacionLeds = false;
    moverServo = false;
    if (animacionDisplay) {
      mostrarHOLA();
    }
  }
  if (tecla == '5') {
    moverServo = !moverServo;
    contandoAscendente = false;
    contandoDescendente = false;
    animacionLeds = false;
    animacionDisplay = false;
  }

  if (contandoAscendente) {
    Serial.println(contador);
    contador++;
    if (contador > 99) {
      contador = 0;
    }
    delay(250); 
  }

  if (contandoDescendente) {
    Serial.println(contador);
    contador--;
    if (contador < 0) {
      contador = 99;
    }
    delay(250); 
  }

  if (animacionLeds) {
    digitalWrite(ledPins[ledIndex], HIGH);
    delay(200);
    digitalWrite(ledPins[ledIndex], LOW);
    ledIndex = (ledIndex + 1) % numLeds;
  }

  if (moverServo) {
    for (int pos = 0; pos <= 180; pos += 1) {
      servo.write(pos);
      delay(15);
    }
    for (int pos = 180; pos >= 0; pos -= 1) {
      servo.write(pos);
      delay(15);
    }
  }

  delay(100); 
}

void mostrarHOLA() {
  mostrarLetra(0b1010); // H
  delay(1000);
  mostrarLetra(0b1011); // O
  delay(1000);
  mostrarLetra(0b1100); // L
  delay(1000);
  mostrarLetra(0b1101); // A
  delay(1000);
}

void mostrarLetra(int letra) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(bcdPins[i], (letra >> i) & 0x01);
  }
}
